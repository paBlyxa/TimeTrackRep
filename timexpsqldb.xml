<?xml version="1.0"?>
<!DOCTYPE xml>

<project name="timexdb">
	<property name="hjar" value="lib/postgresql-9.4.1208.jar" />
	<property name="halias" value="timex" />
	<property name="hport" value="5432" />
	<fail message="no database at port: ${hport}">
		<condition>
			<not>
				<socket port="${hport}" server="127.0.0.1" />
			</not>
		</condition>
	</fail>
	<property name="user" value="postgres" />
	<property name="password" value="gfDkeynbq" />
	<property name="user_owner" value="timex_user" />
	<property name="password_owner" value="123timeX321" />

	<target name="dropdb">
		<sql classpath="${hjar}" driver="org.postgresql.Driver" url="jdbc:postgresql://localhost/template1" userid="${user}" password="${password}" print="yes" autocommit="true">
			
			DROP DATABASE ${halias};
			DROP USER ${user_owner};
		</sql>
	</target>


	<target name="createdb">
		<sql classpath="${hjar}" driver="org.postgresql.Driver" url="jdbc:postgresql://localhost/template1" userid="${user}" password="${password}" print="yes" autocommit="true">

			-- SQL script for TimeX
			-- Step 1: Create USER
			CREATE USER ${user_owner} WITH PASSWORD '${password_owner}';

			-- Step 2: Create database
			CREATE DATABASE ${halias} OWNER timex_user;

			
		</sql>
	</target>


	<target name="execddl">
		<sql classpath="${hjar}" driver="org.postgresql.Driver" url="jdbc:postgresql://localhost:${hport}/${halias}" userid="${user_owner}" password="${password_owner}" print="yes" autocommit="true">

			-- SQL script for TimeX
			-- Step 1: Drop tables if they exist
			DROP TABLE IF EXISTS ProjectLeader;
			DROP TABLE IF EXISTS Timesheet;
			DROP TABLE IF EXISTS Project;
			DROP TABLE IF EXISTS Employee;
			DROP TABLE IF EXISTS Task;

			-- Step 2: Create tables
			CREATE TABLE Project
			(
			projectId serial ,
			name VARCHAR(255) NOT NULL UNIQUE,
			comment VARCHAR(255) ,
			status INTEGER NOT NULL,
			contract VARCHAR(255),
			CONSTRAINT project_pk PRIMARY KEY(projectId)
			);

			CREATE TABLE Employee
			(
			employeeId UUID NOT NULL UNIQUE,
			surname VARCHAR(64) NOT NULL,
			name VARCHAR(32) NOT NULL,
			mail VARCHAR(64) ,
			chief UUID ,
			post VARCHAR(64) ,
			department VARCHAR(255) ,
			username VARCHAR(64) NOT NULL UNIQUE,
			password VARCHAR(32) ,
			CONSTRAINT employee_pk PRIMARY KEY(employeeId),
			CONSTRAINT employee_chief_fk FOREIGN KEY(chief) REFERENCES Employee(employeeId)
			);

			CREATE TABLE Task
			(
			taskId serial ,
			name VARCHAR(255) NOT NULL UNIQUE,
			comment VARCHAR(255) ,
			status INTEGER NOT NULL,
			CONSTRAINT task_pk PRIMARY KEY(taskId)
			);

			CREATE TABLE Timesheet
			(
			id serial ,
			projectId integer NOT NULL,
			taskId integer NOT NULL,
			employeeId UUID NOT NULL,
			dateTask date NOT NULL,
			countTime numeric(7,2) NOT NULL,
			comment VARCHAR(255) ,
			CONSTRAINT timesheet_pk PRIMARY KEY(id),
			CONSTRAINT timesheet_projectId_fk FOREIGN KEY(projectId) REFERENCES
			Project(projectId),
			CONSTRAINT timesheet_taskId_fk FOREIGN KEY(taskId) REFERENCES Task(taskId)
			);

			CREATE TABLE ProjectLeader
			(
			id serial ,
			projectId integer NOT NULL,
			employeeId UUID NOT NULL,
			CONSTRAINT projectleader_pk PRIMARY KEY(id),
			CONSTRAINT projectleader_projectId_fk FOREIGN KEY(projectId) REFERENCES
			Project(projectId)
			);

			CREATE TABLE persistent_logins
			(
			username VARCHAR(64) NOT NULL,
			series VARCHAR(64) NOT NULL,
			token_VARCHAR(64) NOT NULL,
			last_used TIMESTAMP NOT NULL,
			CONSTRAINT series_pk PRIMARY KEY(series)
			);
			
			
			CREATE TABLE WorkCalendar
			(
			id serial,
			dateDay date NOT NULL UNIQUE,
			status INTEGER NOT NULL,
			CONSTRAINT WorkCalendar_pk PRIMARY KEY(id)
			);
			
			CREATE TABLE Vacation
			(
			id serial,
			employeeId UUID NOT NULL,
			startDate DATE NOT NULL,
			duration INTEGER NOT NULL,
			changeDate DATE NOT NULL,
			CONSTRAINT Vacation_pk PRIMARY KEY(id),
			CONSTRAINT dates_overlapping EXCLUDE USING GIST(
				(employeeid::text) WITH=,
				tsrange(startDate, startDate + duration) WITH 
			)
			);
			-- needs symbol
			
			CREATE TABLE Role
			(
			roleId serial,
			name VARCHAR(255) NOT NULL UNIQUE,
			CONSTRAINT role_pk PRIMARY KEY(roleId)
			);
			
			CREATE TABLE Privilege
			(
			privilegeId serial,
			name VARCHAR(255) NOT NULL UNIQUE,
			CONSTRAINT privilege_pk PRIMARY KEY(privilegeId)
			);
			
			CREATE TABLE rolesprivileges
			(
			id serial,
			roleId integer NOT NULL,
			privilegeId integer NOT NULL,
			CONSTRAINT rolesprivileges_pk PRIMARY KEY(id),
			CONSTRAINT rolesprivileges_roleId_fk FOREIGN KEY(roleId) REFERENCES
			Role(roleId),
			CONSTRAINT rolesprivileges_privilegeId_fk FOREIGN KEY(privilegeId) REFERENCES
			Privilege(privilegeId)
			);
			
			CREATE TABLE employeesroles
			(
			id serial,
			roleId integer NOT NULL,
			employeeId UUID NOT NULL,
			CONSTRAINT employeesroles_pk PRIMARY KEY(id),
			CONSTRAINT employeesroles_roleId_fk FOREIGN KEY(roleId) REFERENCES
			Role(roleId),
			CONSTRAINT employeesroles_employeeId_fk FOREIGN KEY(employeeId) REFERENCES
			Employee(employeeId)
			);
			</sql>
	</target>


	<target name="insertddl">
		<sql classpath="${hjar}" driver="org.postgresql.Driver" url="jdbc:postgresql://localhost:${hport}/${halias}" userid="${user}" password="${password}" print="yes" autocommit="true">
				
			-- Step 3: Insert some reference and test data
			--INSERT INTO Project (name, status)
			-- VALUES ('GHK IGK-6', '1');
			--INSERT INTO Project (name, status)
			-- VALUES ('GHK ARM RTK', '1');
			--INSERT INTO Project (name, status)
			-- VALUES ('LAES2 SAU DG', '1');

			--INSERT INTO Employee (surname, name, mail, post, department, username,
			password)
			-- VALUES ('Idolov', 'Michael', 'm.idolov@west-e.ru', 'Leading
			engineer', 'Scheme', 'm.idolov', '123idolov');
			--INSERT INTO Employee (surname, name, mail, post, department, username,
			password)
			-- VALUES ('Muhutdinov', 'Roman', 'r.muhutdinov@west-e.ru', 'Menedger',
			'Menedgers', 'r.muhutdinov', '123muhutdinov');
			--INSERT INTO Employee (surname, name, mail, post, department, username,
			password)
			-- VALUES ('Fakadey', 'Pavel', 'p.fakadey@west-e.ru', 'Leading
			programmer', 'Programmeers', 'fakadey', '123fakadey');


			--INSERT INTO Task (name, status)
			-- VALUES ('Make scheme', '1');
			--INSERT INTO Task (name, status)
			-- VALUES ('Make document', '1');
			--INSERT INTO Task (name, status)
			-- VALUES ('PO', '1');


			--INSERT INTO ProjectLeader (projectId, employeeId)
			-- VALUES (1, 1);
			--INSERT INTO ProjectLeader (projectId, employeeId)
			-- VALUES (1, 2);

			-- Step 4: Verify tables and test data look ok
			--SELECT * FROM Project;
			--SELECT * FROM Task;
			--SELECT * FROM Employee;
			--SELECT * FROM Timesheet;

		</sql>
	</target>
</project>